public class myAsyncTask extends AsyncTask<Void,Integer,Integer>
{

    Activity mContext = null;
    static AsyncTask<Void,Integer,Integer> myAsyncTaskInstance = null;

    // Private Constructor: can't be called from outside this class
    private myAsyncTask(Activity iContext)
    {
        mContext = iContext;
    }

    public static AsyncTask<Void, Integer, Integer> getInstance(Activity iContext)
    {
        // if the current async task is already running, return null: no new async task
        // shall be created if an instance is already running
        if ((myAsyncTaskInstance != null) && myAsyncTaskInstance.getStatus() ==   Status.RUNNING)
        {
            // it can be running but cancelled, in that case, return a new instance
           if (myAsyncTaskInstance.isCancelled())
            {
                myAsyncTaskInstance = new myAsyncTask(iContext);
            }
            else
            {
                // display a toast to say "try later"
                Toast.makeText(iContext, "A task is already running, try later", Toast.LENGTH_SHORT).show();

                return null;
            }
        }

        //if the current async task is pending, it can be executed return this instance
        if ((myAsyncTaskInstance != null) && myAsyncTaskInstance.getStatus() == Status.PENDING)
        {
            return myAsyncTaskInstance;
        }

        //if the current async task is finished, it can't be executed another time, so return a new instance
        if ((myAsyncTaskInstance != null) && myAsyncTaskInstance.getStatus() == Status.FINISHED)
        {
            myAsyncTaskInstance = new myAsyncTask(iContext);
        }


        // if the current async task is null, create a new instance
        if (myAsyncTaskInstance == null)
        {
            myAsyncTaskInstance = new myAsyncTask(iContext);
        }
        // return the current instance
        return myAsyncTaskInstance;
    }

    @Override
    protected Integer doInBackground(Void... iUnUsed)
    {
        // ...
    }

}